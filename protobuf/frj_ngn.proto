syntax = "proto3";

// src/backend-server/src/wire_api/ depends on this. Change it carefully.
package proto_frj_ngn;

// =======================================
// Service
// =======================================

service ProtoFridgeGameEngine {
    rpc HostGame (ProtoHostGameReq) returns (stream ProtoPreGameMessage) {}
    rpc JoinGame (ProtoJoinGameReq) returns (stream ProtoPreGameMessage) {}

    rpc GetGameState (ProtoGetGameStateReq) returns (ProtoGetGameStateReply) {}

    rpc OpenGameDataStream (stream ProtoGameDataIn) returns (stream ProtoGameDataOut) {}
}

// =======================================
// API Request and Reply messages
// =======================================

// Convention: ALL messages should have prefix "Proto" so in the rust src, it's easy
// to understand which types are generated.

message ProtoHostGameReq {
    string player_id = 1;
    string game_id = 2;
    ProtoGameType game_type = 3;
}

message ProtoJoinGameReq {
    string player_id = 1;
    string game_id = 2;
}

message ProtoPreGameMessage {
    oneof inner {
        ProtoHostGameAck host_game_ack = 1;
        ProtoJoinGameAck join_game_ack = 2;
        ProtoPlayerJoinMsg player_join_msg = 3;
        ProtoGameStartMsg game_start_msg = 4;
    }

    // Initial response in ProtoPreGameMessage stream for host
    message ProtoHostGameAck {
        // Empty
    }

    // Initial response in ProtoPreGameMessage stream for guest
    message ProtoJoinGameAck {
        ProtoGameType game_type = 1;
        string host_player_id = 2;
        repeated string other_player_ids = 3;
    }

    // N intermediate messages received in ProtoPreGameMessage stream for host/guest
    message ProtoPlayerJoinMsg {
        string player_id = 1;
    }

    // Terminal message received in ProtoPreGameMessage stream for host/guest
    message ProtoGameStartMsg {
        // Empty
    }
}

message ProtoGetGameStateReq {
    string player_id = 1;
    ProtoGameType game_type = 2;
    string game_id = 3;
}

message ProtoGetGameStateReply {
    ProtoJnGameState game_state = 1;
}

message ProtoGameDataIn {
    oneof inner {
        ProtoGameDataHeader header = 1;
        ProtoJnGameDataIn data = 2;
    }

    message ProtoGameDataHeader {
        string player_id = 1;
        string game_id = 2;
        ProtoGameType game_type = 3;
    }
}

message ProtoGameDataOut {
    oneof inner {
        ProtoJnGameState game_state = 1;
        ProtoJnGameDataOut data = 2;
    }
}

// =======================================
// Sub types
// =======================================

enum ProtoGameType {
    UNSPECIFIED_GAME_TYPE = 0;
    LOVE_LETTER = 1;
    LOST_CITIES = 2;
}

// =======================================
// Jn types
// =======================================

message ProtoJnGameState {
    // TODO `Any` game-specific payload
}

message ProtoJnGameDataIn {
    // TODO `Any` game-specific payload
}

message ProtoJnGameDataOut {
    // TODO `Any` game-specific payload
}

// =======================================
// LoveLetter types
// =======================================

enum ProtoPlayCardSource {
    UNSPECIFIED_PLAY_CARD_SOURCE = 0;
    HAND = 1;
    TOP_DECK = 2;
}

enum ProtoLoveLetterCard {
    UNSPECIFIED_LOVE_LETTER_CARD = 0;
    GUARD = 1;
    PRIEST = 2;
    BARON = 3;
    HANDMAID = 4;
    PRINCE = 5;
    KING = 6;
    COUNTESS = 7;
    PRINCESS = 8;
}

message ProtoStageCardReq {
    string player_id = 1;
    ProtoPlayCardSource card_source = 2;
}

message ProtoStageCardReply {
    // Simple ACK
}

message ProtoSelectTargetPlayerReq {
    string player_id = 1;
    string target_player_id = 2;
}

message ProtoSelectTargetPlayerReply {
    // Simple ACK
}

message ProtoSelectTargetCardReq {
    string player_id = 1;
    ProtoLoveLetterCard target_card = 2;
}

message ProtoSelectTargetCardReply {
    // Simple ACK
}

message ProtoPlayCardCommitReq {
    string player_id = 1;
}

message ProtoPlayCardCommitReply {

}
