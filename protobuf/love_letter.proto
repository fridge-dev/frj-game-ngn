syntax = "proto3";

import "common.proto";

// src depends on this. Change it carefully.
package proto_frj_ngn;

// =======================================
// Data Stream Messages
// =======================================

message ProtoLoveLetterDataIn {

    // Logical clock for this game instance, provided for OCC if game needs it.
    uint64 clock = 1;

    // The actual message
    oneof proto_lv_le_in {
        ProtoGameDataHandshake handshake = 2;
        ProtoGameDataStateReq game_state = 3;
        ProtoLvLePlayCardReq play_card = 4;
        ProtoLvLeSelectTargetPlayer select_target_player = 5;
        ProtoLvLeSelectTargetCard select_target_card = 6;
        ProtoLvLeCommitSelectionReq commit_selection = 7;
    }
}

message ProtoLoveLetterDataOut {

    // Logical clock for this game instance, provided for OCC if game needs it.
    uint64 clock = 1;

    // The actual message
    oneof proto_lv_le_out {
        ProtoLvLeGameState game_state = 2;
        ProtoLvLeTurnIndicatorRepl turn_indicator = 3;
        ProtoLvLePlayCardRepl play_card = 4;
        ProtoLvLeStageCardRepl stage_card = 5;
        ProtoLvLeSelectTargetPlayer select_target_player = 6;
        ProtoLvLeSelectTargetCard select_target_card = 7;
        ProtoLvLeCommitSelectionRepl commit_selection = 8;
    }
}

// =======================================
// API Request and Reply messages
// =======================================

// --- GameState

message ProtoLvLeGameState {

    uint64 clock = 1;
    repeated ProtoLvLePlayer players = 2;
    oneof stage {
        ProtoLvLeRoundState round_in_progress = 3;
        ProtoLvLeResultState round_intermission = 4;
    }

    // -- nested message types

    message ProtoLvLePlayer {
        string player_id = 1;
        uint32 round_wins = 2;
    }

    message ProtoLvLeRoundState {
        repeated string remaining_player_ids = 1;
        ProtoLvLeCard my_hand = 2;
        oneof turn {
            ProtoLvLeCard my_drawn_card = 3;
            string current_turn_player_id = 4;
        }
        ProtoLvLeCardSelection staged_play = 5;
        ProtoLvLeCommittedPlay most_recent_committed_play = 6;
        repeated ProtoLvLeCard play_history = 7;
    }

    message ProtoLvLeResultState {
        // Sparse map, missing value => player eliminated
        map<string, ProtoLvLeCard> final_cards = 1;
    }
}

// --- TurnIndicator

message ProtoLvLeTurnIndicatorRepl {
    // Current player's turn
    string player_id = 1;

    // The new card drawn from top deck
    ProtoLvLeCard your_card = 2;
}

// --- PlayCard

// Req: First action taken during a turn
message ProtoLvLePlayCardReq {
    ProtoLvLeCardSource card_source = 1;

    enum ProtoLvLeCardSource {
        UNSPECIFIED_CARD_SOURCE = 0;
        HAND = 1;
        TOP_DECK = 2;
    }
}

// Repl: Sent when card has no selection.
message ProtoLvLePlayCardRepl {
    ProtoLvLeCard played_card = 1;
    ProtoLvLeCardOutcome outcome = 2;
}

// Repl: Sent when card requires selection
message ProtoLvLeStageCardRepl {
    ProtoLvLeCard played_card = 1;
}

// --- SelectTargetPlayer

// Req & Repl
message ProtoLvLeSelectTargetPlayer {
    string target_player_id = 1;
}

// --- SelectTargetCard

// Req & Repl
message ProtoLvLeSelectTargetCard {
    ProtoLvLeCard target_card = 1;
}

// --- CommitSelection

// Req: Signal completion of selection phase of a turn
message ProtoLvLeCommitSelectionReq {
    // Empty
}

message ProtoLvLeCommitSelectionRepl {
    ProtoLvLeCardOutcome outcome = 1;
}

// =======================================
// Common sub types
// =======================================

enum ProtoLvLeCard {
    UNSPECIFIED_LOVE_LETTER_CARD = 0;
    GUARD = 1; // Guesses another player's card, if correct, other player is out. Can't guess Guard(1).
    PRIEST = 2; // See another player's card.
    BARON = 3; // Privately compare card with another player. Lower card is out.
    HANDMAID = 4; // Self cannot be targeted until the next turn.
    PRINCE = 5; // Choose any player (including self) to discard their card and draw a new one.
    KING = 6; // Trade hands with any other player.
    COUNTESS = 7; // Must be discarded if other card is King(6) or Prince(5).
    PRINCESS = 8; // If this card is ever discarded, that player is out.
}

// Input selection for card:
// 1 - Guard    : `(String, Card)` - the player+card that is guessed
// 2 - Priest   : `(String)` - player to view card
// 3 - Baron    : `(String)` - player to compare with
// 4 - Handmaid : `()`
// 5 - Prince   : `(String)` - player to discard/replace their card
// 6 - King     : `(String)` - player to swap with
// 7 - Countess : `()`
// 8 - Princess : `()`
message ProtoLvLeCardSelection {
    // Set to null for 4,7,8
    reserved 4, 7, 8;

    oneof inner {
        ProtoGuardSelection guard = 1;
        ProtoPriestSelection priest = 2;
        ProtoBaronSelection baron = 3;
        ProtoPrinceSelection prince = 5;
        ProtoKingSelection king = 6;
    }

    message ProtoGuardSelection {
        string opt_player_id = 1;
        ProtoLvLeCard opt_card = 2;
    }
    message ProtoPriestSelection {
        string opt_player_id = 1;
    }
    message ProtoBaronSelection {
        string opt_player_id = 1;
    }
    message ProtoPrinceSelection {
        string opt_player_id = 1;
    }
    message ProtoKingSelection {
        string opt_player_id = 1;
    }
}

// Publicly broadcasted data after playing a card:
// 1 - Guard    : `(bool)` - was guess correct
// 2 - Priest   : `()`
// 3 - Baron    : `(String, Card)` - the player+card that was knocked out
// 4 - Handmaid : `()`
// 5 - Prince   : `(Card)` - the discarded card
// 6 - King     : `(Card)` - new card received by each player
// 7 - Countess : `()`
// 8 - Princess : `()`
message ProtoLvLeCardOutcome {
    // Set to null for 2,4,6,7,8
    reserved 2, 4, 6, 7, 8;
    oneof inner {
        ProtoGuardOutcome guard = 1;
        ProtoBaronOutcome baron = 3;
        ProtoPrinceOutcome prince = 5;
    }

    message ProtoGuardOutcome {
        bool correct = 1;
    }
    message ProtoBaronOutcome {
        string losing_player_id = 1;
        ProtoLvLeCard losing_player_card = 2;
    }
    message ProtoPrinceOutcome {
        ProtoLvLeCard discarded_card = 1;
    }
}

message ProtoLvLeCommittedPlay {
    ProtoLvLeCardSelection selection = 1;
    ProtoLvLeCardOutcome outcome = 2;
}