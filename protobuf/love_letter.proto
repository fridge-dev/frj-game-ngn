syntax = "proto3";

import "common.proto";

// src depends on this. Change it carefully.
package proto_frj_ngn;

// =======================================
// Data Stream Messages
// =======================================

message ProtoLoveLetterDataIn {

    // Logical clock for this game instance
    uint64 clock = 1;

    // The actual message
    oneof proto_lv_le_in {
        ProtoGameDataHandshake handshake = 2;
        ProtoGameDataStateReq game_state = 3;
        ProtoLvLePlayCardReq play_card = 4;
        ProtoLvLeSelectTargetPlayer select_target_player = 5;
        ProtoLvLeSelectTargetCard select_target_card = 6;
        ProtoLvLeCommitSelectionReq commit_selection = 7;
    }
}

message ProtoLoveLetterDataOut {

    // Logical clock for this game instance
    uint64 clock = 1;

    // The actual message
    oneof proto_lv_le_out {
        ProtoLvLeGameState game_state = 2;
        ProtoLvLeTurnIndicatorRepl turn_indicator = 3;
        ProtoLvLePlayCardRepl play_card = 4;
        ProtoLvLeStageCardRepl stage_card = 5;
        ProtoLvLeSelectTargetPlayer select_target_player = 6;
        ProtoLvLeSelectTargetCard select_target_card = 7;
        ProtoLvLeCommitSelectionRepl commit_selection = 8;
    }
}

// =======================================
// API Request and Reply messages
// =======================================

// --- GameState

message ProtoLvLeGameState {

    // Logical clock for this game instance
    uint64 clock = 1;
    repeated ProtoLvLePlayerState players = 2;
    ProtoLvLeCard my_card = 3;
    string current_turn_player_id = 4;
    repeated ProtoLvLeCard play_history = 5;

    message ProtoLvLePlayerState {
        string player_id = 1;
        bool in_play = 2;
        uint32 round_wins = 3;
    }
}

// --- TurnIndicator

message ProtoLvLeTurnIndicatorRepl {
    // Current player's turn
    string player_id = 1;

    // The new card drawn from top deck
    ProtoLvLeCard your_card = 2;
}

// --- PlayCard

// Req: First action taken during a turn
message ProtoLvLePlayCardReq {
    ProtoLvLeCardSource card_source = 1;

    enum ProtoLvLeCardSource {
        UNSPECIFIED_CARD_SOURCE = 0;
        HAND = 1;
        TOP_DECK = 2;
    }
}

// Repl: Sent when card has no selection.
message ProtoLvLePlayCardRepl {
    ProtoLvLeCard played_card = 1;
    ProtoLvLeCardOutcome outcome = 2;
}

// Repl: Sent when card requires selection
message ProtoLvLeStageCardRepl {
    ProtoLvLeCard played_card = 1;
}

// --- SelectTargetPlayer

// Req & Repl
message ProtoLvLeSelectTargetPlayer {
    string target_player_id = 1;
}

// --- SelectTargetCard

// Req & Repl
message ProtoLvLeSelectTargetCard {
    ProtoLvLeCard target_card = 1;
}

// --- CommitSelection

// Req: Signal completion of selection phase of a turn
message ProtoLvLeCommitSelectionReq {
    // Empty
}

message ProtoLvLeCommitSelectionRepl {
    ProtoLvLeCardOutcome outcome = 1;
}

// =======================================
// Common sub types
// =======================================

enum ProtoLvLeCard {
    UNSPECIFIED_LOVE_LETTER_CARD = 0;
    GUARD = 1;
    PRIEST = 2;
    BARON = 3;
    HANDMAID = 4;
    PRINCE = 5;
    KING = 6;
    COUNTESS = 7;
    PRINCESS = 8;
}

// Output data of effect:
// 1 - Guard    : `(bool)` - was guess correct
// 2 - Priest   : `()`
// 3 - Baron    : `(String, Card)` - the player+card that was knocked out
// 4 - Handmaid : `()`
// 5 - Prince   : `(Card)` - the discarded card
// 6 - King     : `(Card)` - new card received by each player
// 7 - Countess : `()`
// 8 - Princess : `()`
message ProtoLvLeCardOutcome {
    // Set to null for 2,4,7,8
    oneof inner {
        ProtoGuardOutcome guard = 1;
        ProtoBaronOutcome baron = 3;
        ProtoPrinceOutcome prince = 5;
        ProtoKingOutcome king = 6;
    }

    message ProtoGuardOutcome {
        bool correct = 1;
    }
    message ProtoBaronOutcome {
        string losing_player_id = 1;
        ProtoLvLeCard losing_player_card = 2;
    }
    message ProtoPrinceOutcome {
        ProtoLvLeCard discarded_card = 1;
    }
    message ProtoKingOutcome {
        ProtoLvLeCard new_card = 1;
    }
}